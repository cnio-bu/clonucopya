import pandas as pd
from snakemake.io import expand, touch


###### Config file and sample sheets #####

configfile: "../config/config.yaml"


##### Target rules #####

rule all:
    input:
        f'{OUTDIR}/pre_piv.done',
        f'{OUTDIR}/make_vcf.done',
        f'{OUTDIR}/make_pandrugs.done',
        f'{OUTDIR}/pre_citup.done'


rule pre_piv:
    input:
        SNVs = f'{OUTDIR}/annotated/snv_{CASES}.vcf',
        CNVs = f'{OUTDIR}/annotated/cnv_{CASES}.tsv'
    params:
        sample = f'{CASES}'
    output:
        f'{OUTDIR}/pyclone-vi/{PATIENT}/input_{CASES}.tsv'
    conda: "envs/commons.yaml"
    threads: config["resources"]["pyclone-vi"]["threads"]
    resources:
        mem = config["resources"]["pyclone-vi"]["mem"],
        walltime=config["resources"]["pyclone-vi"]["walltime"]
    log:
        out = f"{LOGDIR}/pyclone-vi/pre-process.log",
        err = f"{LOGDIR}/pyclone-vi/pre-process.
err"
    shell:"""
        python scripts/cross_snv_cnv.py {params.sample} {input.SNVs} {input.CNVs} {output} > {log} 2> {log}
    """


rule piv:
    input:
        f'{OUTDIR}/pyclone-vi/{PATIENT}/input_{CASES}.tsv'
    output:
        fit = f'{OUTDIR}/pyclone-vi/{PATIENT}/output_{CASES}.h5',
        result = f'{OUTDIR}/pyclone-vi/{PATIENT}/output_{CASES}.tsv'
    conda:"envs/pyclone-vi.yaml"
    threads: config["resources"]["pyclone-vi"]["threads"]
    resources:
        mem = config["resources"]["pyclone-vi"]["mem"],
        walltime = config["resources"]["pyclone-vi"]["walltime"]
    shell:"""
        pyclone-vi fit -i {input} -o {output.fit} -c 40 -d beta-binomial -r 10 &&
        pyclone-vi write-results-file -i {output.fit} -o {output.result}
    """


rule post_piv:
    input:
        prevalence = f'{OUTDIR}/pyclone-vi/{PATIENT}/output_{CASES}.tsv',
        all_mutations = f'{DATASET_DIR}/mutations/mutations.tsv'
    output:
        flag = touch(f'{OUTDIR}/post_piv.done')
    params:
        out_dir = f'{VEP_DATA}/{PATIENT}',
        patient = f'{PATIENT}',
    conda:"envs/commons.yaml"
    shell:
        "python scripts/gen_input_vep_from_piv.py --prevalence {input.prevalence} --mutations {input.all_mutations} \
                    --out_dir {params.out_dir} --patient {params.patient}"


rule make_vcf_piv:
    input:
        f'{OUTDIR}/post_piv.done'
    output:
        flag = touch(f'{OUTDIR}/make_vcf_piv.done')
    params:
        prevalence = f'{OUTDIR}/pyclone-vi/{PATIENT}/output_{CASES}.tsv',
        samples = f'{CASES}',
        patient = f'{PATIENT}',
        vep_dir = f'{VEP_DATA}'
    conda:
        "envs/pandrugs.yaml"
    shell:
        "python scripts/run_docker_vep_from_piv.py --prevalence {params.prevalence} --vep_dir {params.vep_dir} \
                --samples {params.samples} --patient {params.patient}"


rule req_variant_analysis:
    input:
        SNVs = f'{OUTDIR}/annotated/snv_{CASES}.vcf',
        PIVs = f'{OUTDIR}/pyclone-vi/{PATIENT}/output_{CASES}.tsv'
    output:
        flag = touch(f'{OUTDIR}/req_variant_analysis.done')
    params:
        sample = f'{CASES}',
        output = f'{OUTDIR}/pandrugs/{PATIENT}/{CASES}_computations.csv'
    conda: "envs/pandrugs.yaml"
    threads: config["resources"]["pandrugs"]["threads"]
    resources:
        mem = config["resources"]["pandrugs"]["mem"],
        walltime = config["resources"]["pandrugs"]["walltime"]
    shell: """
        python scripts/alt/clones2pandrugs.py {params.sample} {input.SNVs} {input.PIVs} {params.output}
    """


rule pre_heatmap_piv:
    input:
        init_flag = f'{OUTDIR}/req_variant_analysis.done'
    output:
        end_flag = touch(f'{OUTDIR}/pre_heatmap_piv.done')
    params:
        prevalence = f'{OUTDIR}/pyclone-vi/{PATIENT}/output_{SAMPLES}.tsv',
        all_mutations = f'{DATASET_DIR}/mutations/mutations.tsv',
        samples = expand(f'{{sample}}', sample=CASES),
        patient = f'{PATIENT}',
        pandrugs_dir = f'{BASE_DIR}/{OUTDIR}/pandrugs',
        out_dir = f'{BASE_DIR}/{OUTDIR}/heatmap'
    conda:
        "envs/commons.yaml"
    shell:
        "python scripts/match_results_pandrugs_from_piv.py --prevalence {params.prevalence} --mutations {params.all_mutations} \
                    --pandrugs_dir {params.pandrugs_dir} --out_dir {params.out_dir} --patient {params.patient} \
                    --samples {params.samples}"


rule run_heatmap_piv:
    input:
        init_flag = f'{OUTDIR}/pre_heatmap_piv.done'
    output:
        end_flag = touch(f'{OUTDIR}/run_heatmap_piv.done')
    params:
        prevalence = f'{OUTDIR}/pyclone-vi/{PATIENT}/output_{SAMPLES}.tsv',
        samples = expand(f'{{sample}}', sample=CASES),
        patient = f'{PATIENT}',
        pandrugs_dir = f'{BASE_DIR}/{OUTDIR}/pandrugs',
        heatmap_dir = f'{BASE_DIR}/{OUTDIR}/heatmap',
        out_file_gd= f'{BASE_DIR}/{OUTDIR}/heatmap/{PATIENT}/heatmap_all_drugs_compared.png',
        out_file_vars=f'{BASE_DIR}/{OUTDIR}/heatmap/{PATIENT}/heatmap_all_genes_compared.png'
    conda:
        "envs/heatmap.yaml"
    shell:
        "python scripts/run_heatmap_from_piv.py --prevalence {params.prevalence} --heatmap_dir {params.heatmap_dir} \
                    --pandrugs_dir {params.pandrugs_dir} --out_file_gd {params.out_file_gd} --patient {params.patient} \
                    --out_file_vars {params.out_file_vars} --samples {params.samples}"
