from snakemake.io import expand, touch
from snakemake.utils import validate
from glob import glob
import os
import pandas as pd

###### Config file, environment and sample sheet #####

configfile: "../config/config.yaml"

validate(config, "resources/schemas/config_schema.yaml")

os.environ["SNAKEMAKE_OUTPUT_CACHE"] = f"{os.getcwd()}/resources/vep/cache"

##### Target rules #####

samples_df = pd.read_csv(config["samplesheet"])

samples = samples_df.set_index("sample_id", drop=False)

validate(samples, "resources/schemas/samplesheet_schema.yaml")


sample_project_pairs = list(zip(samples_df["project"], samples_df["sample_id"]))

print("Sample-Project pairs:", sample_project_pairs)


# Check files exist
missing_files = samples_df[~samples_df["mutations"].apply(os.path.exists) | 
                          ~samples_df["cnvs"].apply(os.path.exists)]
if not missing_files.empty:
    raise FileNotFoundError(f"Missing input files in the samplesheet:\n{missing_files}")

rule all:
    input:
        expand("results/mutation_prep/{project}/{sample}_prep.mut.tsv", zip, project=samples_df["project"], sample=samples_df["sample_id"]),
        expand("results/pyclone-vi_prep/{project}/{sample}_intersect_pvi.tsv", zip, project=samples_df["project"], sample=samples_df["sample_id"]),
        expand("results/pyclone-vi_prep/{project}/combined_intersect_pvi.tsv", project=samples_df["project"].unique()),
        expand("results/pyclone-vi/{project}/pvi_out.tsv", project=samples_df["project"].unique()),
        expand("results/pvi_vep_prep/{project}", project=samples_df["project"].unique()),
        "resources/vep/cache",
        expand("results/vep_annotation/{project}/annotations", project=samples_df["project"].unique()),
        expand("results/query_pandrugs/{project}", project=samples_df["project"].unique()),
        expand("results/phyclone/{project}/tree.nwk", project=samples_df["project"].unique())




# FORMAT MUTATION VCF

include: "rules/mutation_prep.smk"

# INTERSECT MUTATIONS AND CNVs

include: "rules/pyclone-vi_prep.smk"


# RUN PYCLONE-VI SUBCLONAL INFERENCE

include: "rules/pyclone-vi.smk"


# FORMAT PYCLONE-VI OUTPUT FOR ENSEMBL-VEP

include: "rules/pvi_vep_prep.smk"


# DOWNLOAD ENSEMBL-VEP CACHE

include: "rules/get_vep_cache.smk"


# VEP ANNOTATION PER CLUSTER

include: "rules/vep_annotation.smk"


# QUERY PANDRUGS SMALL VARIANTS

include: "rules/query_pandrugs.smk"


# BUILD SUBCLONAL TREE

include: "rules/phyclone.smk"
