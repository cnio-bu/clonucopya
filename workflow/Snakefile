from snakemake.io import expand, touch
from glob import glob
import os
import pandas as pd

###### Config file, environment and sample sheet #####

configfile: "../config/config.yaml"

os.environ["SNAKEMAKE_OUTPUT_CACHE"] = f"{os.getcwd()}/resources/vep/cache"

##### Target rules #####

projects = pd.read_csv(config["samplesheet"]).set_index("project", drop=False)

samples = pd.read_csv(config["samplesheet"]).set_index("sample_id", drop=False)



# Define target rule
rule all:
    input:
        expand("results/mutation_prep/{project}/{sample}_prep.mut.tsv", project=projects.index, sample=samples.index),
        expand("results/pyclone-vi_prep/{project}/{sample}_intersect_pvi.tsv", project=projects.index, sample=samples.index),
        expand("results/pyclone-vi_prep/{project}/combined_intersect_pvi.tsv", project=projects.index),
        expand("results/pyclone-vi/{project}/pvi_out.tsv", project=projects.index),
        expand("results/pvi_vep_prep/{project}", project=projects.index),
        "resources/vep/cache",
        expand("results/vep_annotation/{project}/annotations", project=projects.index),
        expand("results/query_pandrugs/{project}", project=projects.index),
        expand("results/phyclone/{project}/tree.nwk", project=projects.index)



# FORMAT MUTATION VCF

include: "rules/mutation_prep.smk"

# INTERSECT MUTATIONS AND CNVs

include: "rules/pyclone-vi_prep.smk"


# RUN PYCLONE-VI SUBCLONAL INFERENCE

include: "rules/pyclone-vi.smk"


# FORMAT PYCLONE-VI OUTPUT FOR ENSEMBL-VEP

include: "rules/pvi_vep_prep.smk"


# DOWNLOAD ENSEMBL-VEP CACHE

include: "rules/get_vep_cache.smk"


# VEP ANNOTATION PER CLUSTER

include: "rules/vep_annotation.smk"


# QUERY PANDRUGS SMALL VARIANTS

include: "rules/query_pandrugs.smk"


# BUILD SUBCLONAL TREE

include: "rules/phyclone.smk"
